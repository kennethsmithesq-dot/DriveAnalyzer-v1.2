name: Cross-Platform PyInstaller Build (macOS x86_64 + arm64 + Windows)

on:
  pull_request:
    branches: [ main, add/macos-ci-from-main ]
  workflow_dispatch:

jobs:
  build-x86_64:
    name: Build (x86_64)
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download and install python.org universal2 Python 3.11
        run: |
          set -eux
          curl -LO https://www.python.org/ftp/python/3.11.8/python-3.11.8-macos11.pkg
          sudo installer -pkg python-3.11.8-macos11.pkg -target /
          echo "/usr/local/bin" >> $GITHUB_PATH
          python3 --version
          which python3
          python3 -c "import sys; print(sys.executable)"

      - name: Install build deps
        run: |
          set -eux
          rm -rf .venv_x86_64
          arch -x86_64 /usr/local/bin/python3 -m venv .venv_x86_64
          source .venv_x86_64/bin/activate
          arch -x86_64 pip install --upgrade pip
          arch -x86_64 pip install numpy matplotlib
          arch -x86_64 pip install --upgrade pyinstaller
          if [ -f requirements.txt ]; then
            arch -x86_64 pip install -r requirements.txt
          else
            arch -x86_64 pip install reportlab music21 pillow mido pygame
          fi
          arch -x86_64 python3 -c "import sys,platform; print(sys.executable); print(platform.machine())" > build-env.txt || true
          rm -rf build dist *.spec || true
          arch -x86_64 pip freeze > installed-packages.txt || true
          ls -la > ls-root.txt || true

      - name: Copy DejaVu fonts to assets/fonts
        run: |
          set -eux
          source .venv_x86_64/bin/activate
          FONT_SRC=$(arch -x86_64 python3 -c "import matplotlib; import os; print(os.path.join(matplotlib.get_data_path(), 'fonts', 'ttf'))")
          mkdir -p assets/fonts
          cp -v $FONT_SRC/DejaVu*.ttf assets/fonts/ || true
          ls -la assets/fonts || true

      - name: Build with PyInstaller (x86_64 app bundle)
        run: |
          set -eux
          source .venv_x86_64/bin/activate
          echo "== PYINSTALLER: APP BUNDLE BUILD ==" > build-app.log
          arch -x86_64 python3 -m PyInstaller --noconfirm --clean --windowed --name DriveAnalyzer TEST.py \
            --add-data assets/title.png:assets \
            --add-data assets/ico.png:assets \
            --add-data assets/fonts:assets/fonts \
            --add-data assets/images:assets/images \
            --hidden-import=mido --hidden-import=mido.backends.rtmidi --collect-all mido --icon assets/myicon.icns >> build-app.log 2>&1 || true
          if [ -d dist/DriveAnalyzer.app ]; then
            chmod -R a+rX dist/DriveAnalyzer.app || true
          fi
          cp build-app.log build-app-x86_64.log || true

      - name: Package artifact (zip .app)
        run: |
          set -eux
          if [ -d dist/DriveAnalyzer.app ]; then
            ditto -c -k --sequesterRsrc --keepParent dist/DriveAnalyzer.app driveanalyzer-x86_64.app.zip
            ls -la driveanalyzer-x86_64.app.zip
          else
            echo "Warning: .app bundle not found"
            ls -la dist || true
          fi

      - name: Upload artifact (.app bundle)
        uses: actions/upload-artifact@v4
        with:
          name: driveanalyzer-x86_64-app
          path: dist/DriveAnalyzer.app

      - name: Upload build logs and diagnostics
        uses: actions/upload-artifact@v4
        with:
          name: driveanalyzer-x86_64-logs
          path: |
            build-app-x86_64.log
            build-env.txt
            ls-root.txt

  build-arm64:
    name: Build (arm64)
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure runner is Apple Silicon (arm64)
        run: |
          set -eux
          uname -m
          python3 -c "import platform; print(platform.machine())"
          if [ "$(uname -m)" != "arm64" ]; then
            echo "This job requires an Apple Silicon (arm64) runner. Failing to avoid accidental x86 execution."
            exit 1
          fi

      - name: Download and install python.org universal2 Python 3.11
        run: |
          set -eux
          curl -LO https://www.python.org/ftp/python/3.11.8/python-3.11.8-macos11.pkg
          sudo installer -pkg python-3.11.8-macos11.pkg -target /
          echo "/usr/local/bin" >> $GITHUB_PATH
          python3 --version
          which python3
          python3 -c "import sys; print(sys.executable)"

      - name: Install build deps (arm64/native)
        run: |
          set -eux
          rm -rf .venv_arm64
          /usr/local/bin/python3 -m venv .venv_arm64
          source .venv_arm64/bin/activate
          pip install --upgrade pip
          pip install numpy matplotlib
          pip install --upgrade pyinstaller
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install reportlab music21 pillow mido pygame
          fi
          python3 -c "import sys,platform; print(sys.executable); print(platform.machine())" > build-env-arm64.txt || true
          rm -rf build dist *.spec || true
          pip freeze > installed-packages-arm64.txt || true
          ls -la > ls-root-arm64.txt || true

      - name: Copy DejaVu fonts to assets/fonts
        run: |
          set -eux
          source .venv_arm64/bin/activate
          FONT_SRC=$(python3 -c "import matplotlib; import os; print(os.path.join(matplotlib.get_data_path(), 'fonts', 'ttf'))")
          mkdir -p assets/fonts
          cp -v $FONT_SRC/DejaVu*.ttf assets/fonts/ || true
          ls -la assets/fonts || true

      - name: Build with PyInstaller (arm64 app bundle)
        run: |
          set -eux
          source .venv_arm64/bin/activate
          echo "== PYINSTALLER: ARM64 APP BUNDLE BUILD ==" > build-app-arm64.log
          python3 -m PyInstaller --noconfirm --clean --windowed --name DriveAnalyzer TEST.py \
            --add-data assets/title.png:assets \
            --add-data assets/ico.png:assets \
            --add-data assets/fonts:assets/fonts \
            --add-data assets/images:assets/images \
            --hidden-import=mido --hidden-import=mido.backends.rtmidi --collect-all mido --icon assets/myicon.icns >> build-app-arm64.log 2>&1 || true
          if [ -d dist/DriveAnalyzer.app ]; then
            chmod -R a+rX dist/DriveAnalyzer.app || true
          fi
          cp build-app-arm64.log build-app-arm64.log || true

      - name: Package artifact (zip .app)
        run: |
          set -eux
          if [ -d dist/DriveAnalyzer.app ]; then
            ditto -c -k --sequesterRsrc --keepParent dist/DriveAnalyzer.app driveanalyzer-arm64.app.zip
            ls -la driveanalyzer-arm64.app.zip
          else
            echo "Warning: .app bundle not found"
            ls -la dist || true
          fi

      - name: Upload artifact (.app bundle)
        uses: actions/upload-artifact@v4
        with:
          name: driveanalyzer-arm64-app
          path: dist/DriveAnalyzer.app

      - name: Upload build logs and diagnostics (arm64)
        uses: actions/upload-artifact@v4
        with:
          name: driveanalyzer-arm64-logs
          path: |
            build-app-arm64.log
            build-env-arm64.txt
            ls-root-arm64.txt

  build-windows:
    name: Build (Windows)
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install numpy matplotlib
          pip install --upgrade pyinstaller
          if (Test-Path requirements.txt) {
            pip install -r requirements.txt
          } else {
            pip install reportlab music21 pillow mido pygame
          }
          python -c "import sys,platform; print(sys.executable); print(platform.machine())" > build-env-windows.txt
          Remove-Item -Path build,dist,*.spec -Recurse -Force -ErrorAction SilentlyContinue
          pip freeze > installed-packages-windows.txt
          Get-ChildItem > ls-root-windows.txt

      - name: Copy DejaVu fonts to assets/fonts
        run: |
          $FONT_SRC = python -c "import matplotlib; import os; print(os.path.join(matplotlib.get_data_path(), 'fonts', 'ttf'))"
          New-Item -ItemType Directory -Force -Path assets/fonts
          Copy-Item "$FONT_SRC/DejaVu*.ttf" assets/fonts/ -Force
          Get-ChildItem assets/fonts

      - name: Build with PyInstaller (Windows executable)
        run: |
          echo "== PYINSTALLER: WINDOWS EXE BUILD ==" > build-exe-windows.log
          python -m PyInstaller --onefile --windowed --name DriveAnalyzer TEST.py `
            --add-data "assets/title.png;assets" `
            --add-data "assets/ico.png;assets" `
            --add-data "assets/fonts;assets/fonts" `
            --add-data "assets/images;assets/images" `
            --hidden-import=mido --hidden-import=mido.backends.rtmidi --collect-all mido `
            --icon assets/myicon.ico 2>&1 | Tee-Object -FilePath build-exe-windows.log
          if (Test-Path dist/DriveAnalyzer.exe) {
            Write-Output "Build successful - DriveAnalyzer.exe created"
          } else {
            Write-Output "Warning: .exe not found"
            Get-ChildItem dist
          }

      - name: Package artifact (zip exe)
        run: |
          if (Test-Path dist/DriveAnalyzer.exe) {
            Compress-Archive -Path dist/DriveAnalyzer.exe -DestinationPath driveanalyzer-windows.zip
            Get-ChildItem driveanalyzer-windows.zip
          } else {
            Write-Output "Warning: .exe not found for packaging"
            Get-ChildItem dist
          }

      - name: Upload artifact (exe)
        uses: actions/upload-artifact@v4
        with:
          name: driveanalyzer-windows-exe
          path: dist/DriveAnalyzer.exe

      - name: Upload build logs and diagnostics (Windows)
        uses: actions/upload-artifact@v4
        with:
          name: driveanalyzer-windows-logs
          path: |
            build-exe-windows.log
            build-env-windows.txt
            ls-root-windows.txt

  package-releases:
    name: Package Release Distributions
    runs-on: ubuntu-latest
    needs: [build-x86_64, build-arm64, build-windows]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Mac release package
        run: |
          mkdir -p mac_release
          
          # Copy the Mac app bundles directly (no extraction needed)
          cp -r artifacts/driveanalyzer-x86_64-app/DriveAnalyzer.app mac_release/DriveAnalyzer_x86_64.app
          cp -r artifacts/driveanalyzer-arm64-app/DriveAnalyzer.app mac_release/DriveAnalyzer_arm64.app
          
          # Copy sample XML files and manual
          cp -r assets/sample_xml mac_release/
          cp assets/manual.pdf mac_release/

          # Zip only the contents of mac_release, so they appear at the root of the archive
          cd mac_release
          zip -r ../drive_analyzer_v1_2_mac.zip ./*
          cd ..
          
          ls -la drive_analyzer_v1_2_mac.zip

      - name: Create Windows release package
        run: |
          mkdir -p windows_release
          
          # Copy the exe directly (no extraction needed)
          cp artifacts/driveanalyzer-windows-exe/DriveAnalyzer.exe windows_release/drive_analyzer.exe
          
          # Copy sample XML files and manual
          cp -r assets/sample_xml windows_release/
          cp assets/manual.pdf windows_release/

          # Zip only the contents of windows_release, so they appear at the root of the archive
          cd windows_release
          zip -r ../drive_analyzer_v1_2.zip ./*
          cd ..

          ls -la drive_analyzer_v1_2.zip

      - name: Upload Mac release package
        uses: actions/upload-artifact@v4
        with:
          name: drive-analyzer-v1-2-mac
          path: drive_analyzer_v1_2_mac.zip

      - name: Upload Windows release package
        uses: actions/upload-artifact@v4
        with:
          name: drive-analyzer-v1-2               
          path: drive_analyzer_v1_2.zip
